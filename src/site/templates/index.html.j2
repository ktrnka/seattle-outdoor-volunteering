<!doctype html>
<html data-theme="light">
<head>
  <meta charset="utf-8">
  <title>Seattle Outdoor Volunteer Calendar</title>
  <link rel="stylesheet" href="https://unpkg.com/@picocss/pico@1.5.10/css/pico.min.css">
  <style>
    .add-to-calendar { font-size: 0.8em; padding: 0.25rem 0.5rem; }
    .date-header { 
      background-color: white; 
      font-weight: bold; 
      text-align: center; 
      font-size: 1.1em;
      padding-top: 1.5rem;
      padding-bottom: 0.75rem;
      border-bottom: 2px solid #dee2e6;
    }
    .date-header:first-child {
      padding-top: 0.75rem;
    }
    /* Remove alternating row colors */
    table[role="grid"] tbody tr {
      background-color: transparent;
    }
    /* Debug button styling */
    .debug-btn {
      background: none;
      border: none;
      cursor: pointer;
      opacity: 0.6;
      transition: opacity 0.2s ease;
      font-size: 0.9em;
      padding: 0.25rem;
      width: 100%;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.25rem;
    }
    .debug-btn:hover {
      opacity: 1;
      background-color: #f0f0f0;
      border-radius: 3px;
    }
    .debug-btn small {
      background-color: #007bff;
      color: white;
      padding: 0.1rem 0.3rem;
      border-radius: 0.75rem;
      font-size: 0.75em;
      font-weight: bold;
      min-width: 1.2em;
      text-align: center;
    }
    /* Modal content styling */
    #debug-modal article {
      max-width: 800px;
      width: 90vw;
      max-height: 85vh;
      margin: auto;
      display: flex;
      flex-direction: column;
    }
    #debug-modal main {
      flex: 1;
      overflow-y: auto;
      min-height: 0;
    }
    #debug-modal header,
    #debug-modal footer {
      flex-shrink: 0;
    }
  </style>
</head>
<body>
  <main class="container">
    <h1>Outdoor Volunteer Opportunities (Seattle-area)</h1>
    <p><small>
      Events are automatically collected from multiple sources (Green Seattle Partnership, Seattle Parks & Recreation, Seattle Parks Foundation)
      and deduplicated to show the most comprehensive information available.
    </small></p>
    
    <table role="grid">
      <tbody>
      {% for date_group in events_by_date %}
        <tr class="date-header">
          <td colspan="5">{{ date_group.date.strftime('%A, %-m/%-d') }}</td>
        </tr>
        {% for e in date_group.events %}
        <tr>
          <td>
            {% if e.is_date_only %}
              <small>Time unknown</small>
            {% else %}
              <small>{{ e.start.strftime('%-I:%M%p')|lower }} - {{ e.end.strftime('%-I:%M%p')|lower }}</small>
            {% endif %}
          </td>
          <td>
            <a href="{{ e.url }}">
              {% if e.event_type == 'parks' %}üå≥{% elif e.event_type == 'cleanup' %}üóëÔ∏è{% else %}ü§ù{% endif %} {{ e.title }}
            </a>
          </td>
          <td>
            {% if e.venue %}
              {{ e.venue }}
              {% if e.maps_url %} (<a href="{{ e.maps_url }}" target="_blank">{{ e.address }}</a>){% endif %}
            {% elif e.address and e.address.lower() != 'none' %}
              {% if e.maps_url %}<a href="{{ e.maps_url }}" target="_blank">{{ e.address }}</a>{% else %}{{ e.address }}{% endif %}
            {% else %}
              Location TBD
            {% endif %}
          </td>
          <td>
            {% if not e.is_date_only %}
            <a
              href="https://calendar.google.com/calendar/render?action=TEMPLATE
&text={{ e.title|urlencode }}
&dates={{ e.start_utc.strftime('%Y%m%dT%H%M%SZ') }}/{{ e.end_utc.strftime('%Y%m%dT%H%M%SZ') }}
&location={{ (e.address or e.venue or '')|urlencode }}"
              class="add-to-calendar" role="button" target="_blank">Add to Google</a>
            <!-- TODO: Outlook, Apple -->
            {% endif %}
          </td>
          <td>
            <button class="debug-btn" data-canonical-id="{{ e.canonical_id }}" title="Show debug info ({{ e.source_events_count }} source{{ 's' if e.source_events_count != 1 else '' }})">
              üîç <small>{{ e.source_events_count }}</small>
            </button>
          </td>
        </tr>
        {% endfor %}
      {% endfor %}
      </tbody>
    </table>

    <!-- Debug Modal -->
    <dialog id="debug-modal">
      <article>
        <header>
          <button aria-label="Close" rel="prev" data-close-modal></button>
          <h3 id="debug-modal-title">Event Debug Information</h3>
        </header>
        <main id="debug-modal-content">
          <h6>Source Records</h6>
          <p><small>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</small></p>
          <p><small>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</small></p>
          <h6>Deduplication Process</h6>
          <p><small>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</small></p>
        </main>
        <footer>
          <button data-close-modal>Close</button>
        </footer>
      </article>
    </dialog>

    <footer>
      <small>Built automatically every night. Data may lag sources.</small>
      {% if source_stats %}
      <div style="margin-top: 1rem;">
        <small><strong>Data Source Updates:</strong></small>
        <ul style="margin: 0.5rem 0; padding-left: 1.5rem;">
        {% for source, last_updated in source_stats.items() %}
          <li><small><strong>{{ source }}:</strong> {{ last_updated.strftime('%-m/%-d/%Y at %-I:%M%p')|lower }}</small></li>
        {% endfor %}
        </ul>
      </div>
      {% endif %}
    </footer>
  </main>

  <!-- Debug data for JavaScript -->
  <script type="application/json" id="debug-data">
    {{ debug_data|tojson }}
  </script>

  <script>
    // Debug modal functionality
    const modal = document.getElementById('debug-modal');
    const modalTitle = document.getElementById('debug-modal-title');
    const modalContent = document.getElementById('debug-modal-content');
    
    // Load debug data
    const debugData = JSON.parse(document.getElementById('debug-data').textContent);
    
    // Event type emoji mapping
    const eventTypeEmojis = {
      'parks': 'üå≥',
      'cleanup': 'üóëÔ∏è', 
      'other': 'ü§ù'
    };
    
    // Helper function to format datetime
    function formatDateTime(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
        timeZoneName: 'short'
      });
    }
    
    // Helper function to format tags
    function formatTags(tags) {
      if (!tags || tags.length === 0) return '<em>None</em>';
      return tags.map(tag => `<code>${tag}</code>`).join(', ');
    }
    
    // Helper function to format source_dict JSON
    function formatSourceDict(sourceDict) {
      if (!sourceDict) return '<em>None</em>';
      try {
        const parsed = JSON.parse(sourceDict);
        return `<pre style="font-size: 0.8em; max-height: 200px; overflow-y: auto; background-color: #f8f9fa; padding: 0.5rem; border-radius: 0.25rem; white-space: pre-wrap;">${JSON.stringify(parsed, null, 2)}</pre>`;
      } catch (e) {
        // If it's not valid JSON, just display as text
        return `<code style="word-break: break-all;">${sourceDict}</code>`;
      }
    }
    
    // Open modal when debug button is clicked
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('debug-btn')) {
        const canonicalId = e.target.dataset.canonicalId;
        const data = debugData[canonicalId];
        
        if (!data) {
          console.error('No debug data found for canonical ID:', canonicalId);
          return;
        }
        
        modalTitle.textContent = `Debug Info: ${data.title}`;
        
        let content = '<h6>Source Records</h6>';
        
        if (data.source_events.length === 0) {
          content += '<p><small><em>No source events found.</em></small></p>';
        } else {
          data.source_events.forEach((event, index) => {
            content += `
              <div style="margin-bottom: 1.5rem; padding: 1rem; border: 1px solid #dee2e6; border-radius: 0.25rem; background-color: #f8f9fa;">
                <h6>Source ${index + 1}: ${event.source}</h6>
                <table style="font-size: 0.85em; margin: 0;">
                  <tr><td><strong>Source ID:</strong></td><td><code>${event.source_id}</code></td></tr>
                  <tr><td><strong>Title:</strong></td><td>${event.title}</td></tr>
                  <tr><td><strong>Start:</strong></td><td>${formatDateTime(event.start)}</td></tr>
                  <tr><td><strong>End:</strong></td><td>${formatDateTime(event.end)}</td></tr>
                  <tr><td><strong>Venue:</strong></td><td>${event.venue || '<em>None</em>'}</td></tr>
                  <tr><td><strong>Address:</strong></td><td>${event.address || '<em>None</em>'}</td></tr>
                  <tr><td><strong>URL:</strong></td><td><a href="${event.url}" target="_blank">${event.url}</a></td></tr>
                  <tr><td><strong>Tags:</strong></td><td>${formatTags(event.tags)}</td></tr>
                  ${event.same_as ? `<tr><td><strong>Same As:</strong></td><td><a href="${event.same_as}" target="_blank">${event.same_as}</a></td></tr>` : ''}
                  <tr><td><strong>Source Data:</strong></td><td>${formatSourceDict(event.source_dict)}</td></tr>
                </table>
              </div>
            `;
          });
        }
        
        modalContent.innerHTML = content;
        modal.showModal();
      }
    });
    
    // Close modal when close button is clicked
    document.addEventListener('click', (e) => {
      if (e.target.dataset.closeModal !== undefined) {
        modal.close();
      }
    });
    
    // Close modal when clicking outside of it
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.close();
      }
    });
  </script>
</body>
</html>
